```yaml
openapi: 3.0.3
info:
  title: Demo Payments API
  version: 0.1.0
  description: |
    Minimal spec to demonstrate docs-as-code and API-first thinking.
    Includes OAuth2, a simple /payments endpoint, and a webhook.
servers:
  - url: https://api.example.com/v1
paths:
  /payments:
    post:
      summary: Create a payment
      security:
        - OAuth2: [payments.write]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [amount, currency]
              properties:
                amount: { type: number, format: float, example: 42.50 }
                currency: { type: string, example: GBP }
                reference: { type: string, example: INV-2025-0001 }
      responses:
        '201':
          description: Payment created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: string, example: pay_123abc }
                  status: { type: string, enum: [created, processing, succeeded, failed] }
                  amount: { type: number }
                  currency: { type: string }
        '400': { description: Invalid request }
  /payments/{id}:
    get:
      summary: Get a payment
      security:
        - OAuth2: [payments.read]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Payment details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: string }
                  status: { type: string }
                  amount: { type: number }
                  currency: { type: string }
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.example.com/authorize
          tokenUrl: https://auth.example.com/token
          scopes:
            payments.read: Read payments
            payments.write: Create payments
x-webhooks:
  payment.succeeded:
    post:
      summary: Webhook when a payment succeeds
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event: { type: string, example: payment.succeeded }
                data:
                  type: object
                  properties:
                    id: { type: string, example: pay_123abc }
                    amount: { type: number }
                    currency: { type: string }
      responses:
        '200': { description: Acknowledge receipt }
